#!/bin/sh

## Get instance IP from cloud-init (replace with VM IP when appropriate)
INSTANCE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

## Install keys, repos and packages
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/hashicorp.gpg
chmod go-w /etc/apt/trusted.gpg.d/hashicorp.gpg
chmod ugo+r /etc/apt/trusted.gpg.d/hashicorp.gpg

apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

apt update && apt install -y unzip consul jq docker.io net-tools

# Install Envoy
useradd envoy
curl https://func-e.io/install.sh | bash -s -- -b /usr/local/bin
func-e use ${envoy_version}
cp /root/.func-e/versions/${envoy_version}/bin/envoy /usr/local/bin

# Install fake-service
mkdir -p /opt/fake-service
wget https://github.com/nicholasjackson/fake-service/releases/download/v0.24.2/fake_service_linux_amd64.zip
unzip -od /opt/fake-service/ fake_service_linux_amd64.zip
rm -f fake_service_linux_amd64.zip
chmod +x /opt/fake-service/fake-service

# Configure Consul and start it up
cat <<EOT > /etc/consul.d/consul.hcl
datacenter = "${dc}"
data_dir = "/opt/consul"
log_level = "INFO"
server = true
bootstrap_expect = 1
advertise_addr = "$${INSTANCE_IP}"
bind_addr = "{{ GetDefaultInterfaces | exclude \"type\" \"IPv6\" | attr \"address\" }}"
client_addr = "0.0.0.0"
ui = true
ports {
  serf_wan = -1
  grpc = 8502
}

connect {
  enabled = true
}

telemetry {
  prometheus_retention_time = "10m"
  disable_hostname = true
}

acl {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
  tokens {
    initial_management = "${consul_token}"
    agent = "${consul_token}"
  }
}
EOT

systemctl daemon-reload
systemctl enable consul --now

sleep 15 # Give consul a moment to 

## Configure Consul DNS 
mkdir -p /etc/systemd/resolved.conf.d/
cat <<EOT > /etc/systemd/resolved.conf.d/consul.conf
[Resolve]
DNS=127.0.0.1:8600
DNSSEC=false
Domains=~consul
EOT

systemctl restart systemd-resolved


# Setup Consul Gateways
export CONSUL_HTTP_TOKEN=${consul_token}
echo CONSUL_HTTP_TOKEN=root >> /etc/environment

## Give the anonymous policy read access (for DNS and catalog)
cat <<EOT > /root/anonymous_policy.hcl
agent_prefix "" {
  policy = "read"
}
node_prefix "" {
  policy = "read"
}
service_prefix "" {
  policy = "read"
}
EOT

consul acl policy create -name "anonymous-policy" \
  -description "This is the anonymous policy" \
  -rules @/root/anonymous_policy.hcl

consul acl token update \
  -id anonymous \
  -policy-name anonymous-policy

## We can now run `dig consul.service.consul` and get a response


## Configure Mesh defaults
cat <<EOT > /root/mesh.hcl
Kind = "mesh"
Peering {
  PeerThroughMeshGateways = true
}
TransparentProxy {
  MeshDestinationsOnly = true
}
EOT
consul config write /root/mesh.hcl


## Configure the gateways
# Mesh
cat <<EOT > /etc/systemd/system/mesh-gateway.service
[Unit]
Description=Consul Mesh Gateway
After=syslog.target network.target

[Service]
Environment=CONSUL_HTTP_TOKEN=$${CONSUL_HTTP_TOKEN}
ExecStart=/usr/bin/consul connect envoy -mesh-gateway -register -address $${INSTANCE_IP}:8443 -wan-address $${INSTANCE_IP}:8443
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

# Ingress
cat <<EOT >> /etc/systemd/system/ingress-gateway.service
[Unit]
Description=Consul Ingress Gateway
After=syslog.target network.target

[Service]
Environment=CONSUL_HTTP_TOKEN=${consul_token}
ExecStart=/usr/bin/consul connect envoy -gateway ingress -register -admin-bind 127.0.0.1:19001
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

# Terminating
cat <<EOT >> /etc/systemd/system/terminating-gateway.service
[Unit]
Description=Consul Terminating Gateway
After=syslog.target network.target

[Service]
Environment=CONSUL_HTTP_TOKEN=${consul_token}
ExecStart=/usr/bin/consul connect envoy -gateway terminating -register -admin-bind 127.0.0.1:19002 -bind-address=default=0.0.0.0:8444  -address $${INSTANCE_IP}:8444
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

systemctl daemon-reload
systemctl enable terminating-gateway --now
systemctl enable ingress-gateway --now
systemctl enable mesh-gateway --now



### Setup transparent proxy scripts

cat << 'EOT' > /usr/local/bin/consul-tproxy-redirect
#!/usr/bin/env bash
set -o errexit

usage(){
  echo "Usage: $(basename "$0") <service_name>"
  exit 1
}

# Ensure a service name was provided
if [[ $# -eq 0 ]]; then
    usage
fi

# Obtain user IDs for consul and envoy
CONSUL_UID=$(id --user consul)
PROXY_UID=$(id --user envoy)

consul connect redirect-traffic \
    -proxy-id="$${1}-sidecar-proxy" \
    -proxy-uid="$${PROXY_UID}" \
    -exclude-uid="$${CONSUL_UID}" \
    -exclude-inbound-port=22 \
    -exclude-inbound-port=1234 \
    -exclude-inbound-port=2345 \
    -exclude-inbound-port=3456 \
    -exclude-inbound-port=8500 \
    -exclude-inbound-port=8443 \
    -exclude-inbound-port=8444
EOT
chmod +x /usr/local/bin/consul-tproxy-redirect


cat << 'EOT' > /usr/local/bin/consul-tproxy-cleanup
#!/usr/bin/env bash
set -o errexit
iptables --table nat --flush
declare -a consul_chains=("INBOUND" "IN_REDIRECT" "OUTPUT" "REDIRECT")
for i in "$${consul_chains[@]}"
do
  iptables --table nat --delete-chain "CONSUL_PROXY_$${i}"
done
iptables --table nat --delete-chain "CONSUL_DNS_REDIRECT" || true
EOT
chmod +x /usr/local/bin/consul-tproxy-cleanup


### Install Apps 

## Allow the ingress to talk to the "client"
cat <<EOT > /root/client-intention.hcl
Kind = "service-intentions"
Name = "client-${dc}"
Sources = [
  {
    Name   = "ingress-gateway"
    Action = "allow"
  }
]
EOT

consul config write /root/client-intention.hcl

## Allow the client to talk to the server
cat <<EOT > /root/server-intention.hcl
Kind = "service-intentions"
Name = "server-${dc}"
Sources = [
  {
    Name   = "client-${dc}"
    Action = "allow"
  },
  {
    Name   = "client-${remote_dc}"
    Peer   = "${remote_dc}"
    Action = "allow"
  }  
]
EOT

consul config write /root/server-intention.hcl

## Downstream (calling) service 
cat <<EOT > /etc/systemd/system/client-${dc}.service
[Unit]
Description=client
After=syslog.target network.target

[Service]
Environment=NAME="client in ${dc}"
Environment=MESSAGE="client in ${dc}"
Environment=UPSTREAM_URIS="http://server-${dc}.virtual.consul,http://server-${remote_dc}.virtual.${remote_dc}.consul"
Environment=LISTEN_ADDR="0.0.0.0:9100"
ExecStart=/opt/fake-service/fake-service
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

cat <<EOT > /etc/systemd/system/client-${dc}-sidecar.service
[Unit]
Description=Consul Envoy
After=syslog.target network.target
Wants=consul.service

ConditionFileIsExecutable=/usr/local/bin/consul-tproxy-cleanup
ConditionFileIsExecutable=/usr/local/bin/consul-tproxy-redirect

[Service]
User=envoy
Group=envoy
Environment=CONSUL_HTTP_TOKEN=$${CONSUL_HTTP_TOKEN}
ExecStartPre=+/usr/local/bin/consul-tproxy-redirect client-${dc}
ExecStart=/usr/bin/consul connect envoy -sidecar-for client-${dc} -admin-bind 127.0.0.1:19010
ExecStopPost=+/usr/local/bin/consul-tproxy-cleanup
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

cat <<EOT > /etc/consul.d/client-${dc}.hcl
service {
  name = "client-${dc}"
  port = 9100
  tags = ["vm", "t-proxy"]

  checks = [
    {
      name = "HTTP API on port 5000"
      http = "http://127.0.0.1:9100/health"
      interval = "10s"
      timeout = "5s"
    }
  ]

  connect {
    sidecar_service {
      proxy {
        mode = "transparent"
      }
    }
  }
  token = "${consul_token}"
}
EOT

## Upstream service 
cat <<EOT > /etc/systemd/system/server-${dc}.service
[Unit]
Description=server
After=syslog.target network.target

[Service]
Environment=NAME="server in ${dc}"
Environment=MESSAGE="server in ${dc}"
Environment=LISTEN_ADDR="0.0.0.0:9101"
ExecStart=/opt/fake-service/fake-service
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

cat <<EOT > /etc/consul.d/server-${dc}.hcl
service {
  name = "server-${dc}"
  port = 9101
  tags = ["vm", "t-proxy", "server", "${dc}"]

  checks = [
    {
      name = "HTTP API on port 9101"
      http = "http://127.0.0.1:9101/health"
      interval = "10s"
      timeout = "5s"
    }
  ]

  connect {
    sidecar_service {}
  }
  token = "$${CONSUL_HTTP_TOKEN}"
}
EOT

cat <<EOT > /etc/systemd/system/server-${dc}-sidecar.service
[Unit]
Description=Consul Envoy Server Sidecar
After=syslog.target network.target

[Service]
Environment=CONSUL_HTTP_TOKEN=$${CONSUL_HTTP_TOKEN}
ExecStart=/usr/bin/consul connect envoy -sidecar-for server-${dc} -admin-bind 127.0.0.1:19011
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

consul reload
systemctl daemon-reload
systemctl restart server-${dc}
systemctl restart server-${dc}-sidecar
systemctl restart client-${dc}
#systemctl restart client-${dc}-sidecar


## Create a TCP listener on port 3456 
cat <<EOT > /root/ingress.hcl
Kind = "ingress-gateway"
Name = "ingress-gateway"

Listeners = [
  {
    Port     = 3456
    Protocol = "tcp"
    Services = [
      {
        Name = "client-${dc}"
      }
    ]
  }
]
EOT
consul config write /root/ingress.hcl


cat <<EOT > /root/exported-services.hcl
Kind = "exported-services"
Name = "default"

Services = [
  {
    Name      = "server-${dc}"
    Consumers = [
        {
            Peer  = "${remote_dc}"
        }
    ]
  }
]
EOT
consul config write /root/exported-services.hcl